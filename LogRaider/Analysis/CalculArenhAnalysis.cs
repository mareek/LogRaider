using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace LogRaider.Analysis
{
    public class CalculArenhAnalysis : ILogAnalysis
    {
        private const string TraitementIdGroupName = "TraitementId";
        private const string GroupIdGroupName = "GroupId";
        private const string ProfilIdGroupName = "ProfilId";
        private const string UserGroupName = "User";

        /*
18-06-2018 10:55:22,639	[5    ]	DEBUG   ess.Managers.TraitementAsynchroneManager [DebutTraitement                    ] *        * DebutTraitement 150030.
15-06-2018 07:18:22,277 [37   ] DEBUG   Builders.PricingLogic.PricingComputation [CalculerPricing                    ] *        * Début du calcul du pricing sur le groupe 204029 et le profil 118884 pricer par SPAD
15-06-2018 07:18:22,980 [37   ] DEBUG   s.PricingLogic.AnalyseProfilConsommation [GenerateCourbesLisseesModeles      ] *        * Lancement de la génération du modèle lissée de consommation.
15-06-2018 07:18:25,980 [37   ] INFO    Prosper.Business.NotificationManager     [CurrentValueProgress               ] *        * Appel de la méthode CurrentValueProgress
*/

        private static readonly Regex _debutTraitementRegex = new Regex(
            $@"^DebutTraitement (?<{TraitementIdGroupName}>\d*)",
            RegexOptions.Compiled);

        private static readonly Regex _startCalculRegex = new Regex(
            $@"^Début du calcul du pricing sur le groupe (?<{GroupIdGroupName}>\d*) et le profil (?<{ProfilIdGroupName}>\d*) pricer par (?<{UserGroupName}>.*)",
            RegexOptions.Compiled);

        public string Name => "Calcul de la durée aproximative du calcul de la puissance Arenh";

        public bool CanBeParalelyzed => false;

        public string AnalyseLogs(IEnumerable<LogEntry> logEntries)
            => CalculArenhInfo.GetHeaderCsv() + "\r\n" + string.Join("\r\n", GetCalculInfos(logEntries).Where(i => i.IsValidPricingNome).Select(i => i.ToCsvLine()));

        private IEnumerable<CalculArenhInfo> GetCalculInfos(IEnumerable<LogEntry> logEntries)
        {
            CalculArenhInfo calculArenhInfo = null;
            foreach (var logEntry in logEntries)
            {
                if (IsDebutTraitementEntry(logEntry))
                {
                    var regexResult = _debutTraitementRegex.Match(logEntry.Message);
                    calculArenhInfo = new CalculArenhInfo(int.Parse(regexResult.Groups[TraitementIdGroupName].Value), logEntry.GetThread());
                }
                else if (calculArenhInfo != null && IsStartCalculEntry(logEntry))
                {
                    var regexResult = _startCalculRegex.Match(logEntry.Message);
                    calculArenhInfo.SetInfos(regexResult.Groups[GroupIdGroupName].Value,
                                             regexResult.Groups[ProfilIdGroupName].Value,
                                             regexResult.Groups[UserGroupName].Value,
                                             logEntry.DateTime);
                }
                else if (calculArenhInfo != null && IsLancemenGenerationModeleLisseEntry(logEntry))
                {
                    calculArenhInfo.DebutCalculArenh = logEntry.DateTime;
                }
                else if (calculArenhInfo != null && IsAppelMethodEntry(logEntry))
                {
                    calculArenhInfo.FinCalculArenh = logEntry.DateTime;
                    yield return calculArenhInfo;
                    calculArenhInfo = null;
                }
            }

            if (calculArenhInfo != null)
            {
                yield return calculArenhInfo;
            }
        }

        public bool Filter(LogEntry logEntry) => IsDebutTraitementEntry(logEntry) ||
                                                 IsStartCalculEntry(logEntry) ||
                                                 IsLancemenGenerationModeleLisseEntry(logEntry) ||
                                                 IsAppelMethodEntry(logEntry);

        private static bool IsDebutTraitementEntry(LogEntry logEntry) => logEntry.Message.StartsWith("DebutTraitement ", StringComparison.Ordinal);

        private static bool IsStartCalculEntry(LogEntry logEntry) => logEntry.Message.StartsWith("Début du calcul du pricing sur le groupe", StringComparison.Ordinal);

        private static bool IsLancemenGenerationModeleLisseEntry(LogEntry logEntry) => logEntry.Message.StartsWith("Lancement de la génération du modèle lissée de consommation", StringComparison.Ordinal);

        private static bool IsAppelMethodEntry(LogEntry logEntry) => logEntry.Message.StartsWith("Appel de la méthode CurrentValueProgress", StringComparison.Ordinal);

        private class CalculArenhInfo
        {
            public CalculArenhInfo(int traitementId, int thread)
            {
                TraitementId = traitementId;
                Thread = thread;
            }

            public void SetInfos(string groupId, string profilId, string user, DateTime debutCalculPricing)
            {
                GroupId = groupId;
                ProfilId = profilId;
                User = user;
                DebutCalculPricing = debutCalculPricing;
            }

            public int TraitementId { get; }
            public int Thread { get; }

            public string GroupId { get; private set; }
            public string ProfilId { get; private set; }
            public string User { get; private set; }
            public DateTime DebutCalculPricing { get; private set; }

            public DateTime DebutCalculArenh { get; set; }
            public DateTime FinCalculArenh { get; set; }

            private TimeSpan ArenhDuration => (FinCalculArenh - DebutCalculArenh);
            private TimeSpan DebutCalculDuration => (FinCalculArenh - DebutCalculPricing);

            public bool IsValidPricingNome => !string.IsNullOrEmpty(GroupId)
                                              && DebutCalculArenh != default
                                              && FinCalculArenh != default
                                              && _idTraitementsPricingNome.Contains(TraitementId);

            public string ToCsvLine() => string.Join("\t", TraitementId, GroupId, ProfilId, ArenhDuration.TotalSeconds, DebutCalculDuration.TotalSeconds);

            public static string GetHeaderCsv() => string.Join("\t", "TraitementId", "GroupId", "ProfilID", "Duration ARENH", "Duration pré pricing");
        }


        private static readonly int[] _idTraitementsPricingNome = { 163395, 163393, 163390, 163381, 163379, 163374, 163369, 163363, 163362, 163357, 163356, 163355, 163354, 163350, 163349, 163348, 163347, 163346, 163343, 163331, 163315, 163314, 163313, 163312, 163311, 163310, 163304, 163303, 163302, 163301, 163300, 163296, 163295, 163292, 163290, 163288, 163287, 163286, 163283, 163282, 163279, 163275, 163273, 163272, 163271, 163269, 163266, 163264, 163263, 163260, 163257, 163256, 163250, 163249, 163240, 163239, 163237, 163234, 163233, 163231, 163230, 163229, 163221, 163220, 163217, 163210, 163206, 163184, 163183, 163182, 163180, 163177, 163175, 163172, 163168, 163167, 163166, 163160, 163152, 163150, 163143, 163141, 163140, 163137, 163136, 163135, 163131, 163130, 163125, 163123, 163122, 163110, 163105, 163104, 163100, 163097, 163096, 163095, 163094, 163093, 163092, 163091, 163090, 163089, 163088, 163087, 163086, 163078, 163074, 163067, 163061, 163052, 163049, 163048, 163045, 163044, 163043, 163040, 163039, 163035, 163030, 163025, 163011, 163008, 163005, 163002, 162998, 162984, 162983, 162982, 162981, 162980, 162979, 162977, 162975, 162974, 162972, 162971, 162968, 162967, 162963, 162957, 162949, 162947, 162946, 162939, 162937, 162935, 162934, 162933, 162930, 162929, 162928, 162927, 162921, 162909, 162903, 162901, 162898, 162879, 162875, 162872, 162871, 162864, 162857, 162854, 162847, 162846, 162845, 162844, 162843, 162839, 162837, 162834, 162833, 162831, 162828, 162826, 162825, 162824, 162823, 162816, 162815, 162814, 162813, 162810, 162804, 162803, 162800, 162791, 162787, 162784, 162781, 162780, 162779, 162769, 162764, 162763, 162759, 162756, 162749, 162748, 162747, 162746, 162744, 162740, 162737, 162730, 162724, 162720, 162718, 162711, 162706, 162704, 162703, 162700, 162699, 162698, 162697, 162695, 162693, 162692, 162690, 162687, 162686, 162685, 162684, 162680, 162679, 162676, 162668, 162666, 162665, 162647, 162645, 162641, 162636, 162625, 162624, 162623, 162622, 162620, 162619, 162617, 162613, 162611, 162595, 162593, 162591, 162590, 162574, 162561, 162560, 162558, 162557, 162539, 162538, 162535, 162534, 162528, 162526, 162525, 162523, 162517, 162513, 162512, 162511, 162510, 162509, 162508, 162507, 162498, 162492, 162491, 162490, 162489, 162483, 162482, 162477, 162475, 162472, 162470, 162463, 162457, 162455, 162454, 162451, 162450, 162434, 162426, 162424, 162423, 162416, 162410, 162396, 162383, 162382, 162380, 162379, 162362, 162358, 162348, 162342, 162328, 162325, 162324, 162323, 162319, 162316, 162315, 162304, 162303, 162301, 162292, 162287, 162286, 162281, 162268, 162255, 162243, 162242, 162241, 162239, 162238, 162228, 162225, 162221, 162220, 162218, 162216, 162215, 162214, 162212, 162210, 162209, 162197, 162180, 162179, 162178, 162174, 162172, 162158, 162152, 162149, 162143, 162142, 162132, 162129, 162128, 162114, 162111, 162102, 162080, 162064, 162060, 162042, 162039, 162005, 161998, 161996, 161963, 161959, 161952, 161947, 161943, 161922, 161919, 161914, 161907, 161906, 161905, 161904, 161890, 161889, 161888, 161887, 161867, 161862, 161853, 161835, 161834, 161833, 161832, 161830, 161825, 161817, 161816, 161812, 161811, 161810, 161806, 161805, 161775, 161773, 161769, 161765, 161764, 161761, 161756, 161753, 161744, 161742, 161736, 161732, 161727, 161726, 161716, 161714, 161713, 161712, 161708, 161705, 161703, 161702, 161698, 161685, 161684, 161683, 161678, 161675, 161673, 161668, 161667, 161661, 161656, 161648, 161647, 161643, 161634, 161626, 161624, 161620, 161618, 161615, 161612, 161604, 161603, 161602, 161599, 161597, 161585, 161564, 161563, 161556, 161540, 161533, 161521, 161517, 161514, 161513, 161511, 161500, 161498, 161490, 161489, 161488, 161484, 161478, 161477, 161475, 161474, 161472, 161468, 161467, 161466, 161458, 161446, 161444, 161443, 161441, 161439, 161434, 161433, 161430, 161422, 161421, 161417, 161411, 161409, 161407, 161406, 161402, 161401, 161398, 161397, 161396, 161395, 161393, 161389, 161386, 161382, 161373, 161372, 161369, 161367, 161365, 161360, 161342, 161339, 161338, 161336, 161335, 161325, 161320, 161301, 161292, 161283, 161282, 161275, 161273, 161272, 161270, 161269, 161266, 161265, 161255, 161248, 161245, 161243, 161239, 161238, 161237, 161236, 161235, 161234, 161233, 161232, 161227, 161225, 161222, 161214, 161213, 161212, 161208, 161207, 161203, 161191, 161186, 161185, 161177, 161171, 161164, 161158, 161157, 161156, 161151, 161149, 161147, 161138, 161137, 161128, 161116, 161114, 161105, 161104, 161102, 161101, 161097, 161089, 161088, 161081, 161061, 161060, 161049, 161048, 161036, 161033, 161024, 161021, 161014, 161013, 161012, 161011, 161010, 161009, 161008, 161004, 161002, 161001, 160995, 160965, 160963, 160961, 160958, 160947, 160930, 160925, 160924, 160910, 160908, 160906, 160904, 160898, 160897, 160886, 160883, 160876, 160872, 160871, 160864, 160860, 160847, 160846, 160844, 160839, 160835, 160832, 160831, 160827, 160826, 160824, 160815, 160812, 160808, 160807, 160801, 160798, 160793, 160788, 160787, 160786, 160783, 160779, 160777, 160775, 160773, 160770, 160769, 160768, 160767, 160766, 160753, 160747, 160745, 160744, 160743, 160741, 160740, 160727, 160726, 160724, 160723, 160715, 160714, 160655, 160651, 160645, 160641, 160637, 160634, 160633, 160632, 160626, 160621, 160615, 160604, 160603, 160602, 160596, 160595, 160593, 160587, 160582, 160581, 160580, 160577, 160576, 160575, 160574, 160572, 160571, 160569, 160564, 160563, 160560, 160559, 160550, 160549, 160548, 160544, 160538, 160533, 160532, 160521, 160517, 160507, 160503, 160493, 160489, 160484, 160438, 160435, 160434, 160422, 160419, 160411, 160406, 160401, 160398, 160387, 160385, 160383, 160382, 160380, 160377, 160374, 160367, 160365, 160360, 160359, 160354, 160348, 160338, 160330, 160329, 160317, 160313, 160309, 160307, 160306, 160301, 160293, 160291, 160288, 160282, 160281, 160280, 160278, 160275, 160268, 160266, 160261, 160258, 160255, 160248, 160247, 160223, 160217, 160207, 160205, 160204, 160203, 160202, 160201, 160195, 160192, 160191, 160189, 160188, 160187, 160174, 160172, 160168, 160163, 160162, 160153, 160148, 160147, 160146, 160139, 160137, 160136, 160134, 160133, 160128, 160127, 160115, 160112, 160110, 160093, 160089, 160084, 160082, 160079, 160077, 160074, 160069, 160065, 160064, 160063, 160061, 160053, 160052, 160048, 160045, 160044, 160043, 160042, 160039, 160038, 160037, 160034, 160028, 160023, 160022, 160020, 160014, 160013, 160012, 160006, 159994, 159989, 159987, 159982, 159981, 159979, 159978, 159976, 159975, 159972, 159971, 159969, 159959, 159944, 159942, 159940, 159938, 159934, 159933, 159919, 159917, 159916, 159915, 159914, 159913, 159912, 159909, 159905, 159904, 159903, 159901, 159898, 159897, 159896, 159895, 159894, 159892, 159889, 159888, 159878, 159876, 159870, 159868, 159860, 159858, 159857, 159856, 159854, 159852, 159848, 159846, 159841, 159840, 159839, 159838, 159836, 159833, 159832, 159830, 159826, 159825, 159822, 159820, 159818, 159816, 159815, 159813, 159811, 159810, 159804, 159801, 159800, 159794, 159793, 159792, 159791, 159789, 159788, 159787, 159786, 159784, 159781, 159779, 159776, 159774, 159769, 159768, 159764, 159746, 159745, 159744, 159743, 159742, 159741, 159740, 159739, 159738, 159735, 159734, 159732, 159728, 159726, 159717, 159716, 159715, 159714, 159712, 159710, 159702, 159701, 159696, 159695, 159689, 159687, 159686, 159670, 159665, 159663, 159662, 159658, 159656, 159649, 159648, 159646, 159644, 159641, 159634, 159631, 159630, 159629, 159627, 159625, 159622, 159619, 159618, 159617, 159608, 159607, 159604, 159601, 159600, 159592, 159585, 159577, 159570, 159569, 159566, 159564, 159563, 159561, 159555, 159548, 159547, 159545, 159541, 159535, 159534, 159533, 159530, 159529, 159528, 159527, 159525, 159520, 159518, 159516, 159513, 159509, 159507, 159503, 159501, 159499, 159498, 159491, 159488, 159486, 159485, 159484, 159481, 159478, 159477, 159476, 159468, 159467, 159463, 159462, 159460, 159452, 159451, 159450, 159447, 159445, 159435, 159434, 159427, 159426, 159421, 159418, 159417, 159416, 159415, 159414, 159410, 159409, 159408, 159405, 159404, 159401, 159397, 159391, 159386, 159385, 159382, 159381, 159377, 159376, 159374, 159367, 159365, 159361, 159360, 159359, 159358, 159333, 159332, 159331, 159326, 159325, 159320, 159314, 159313, 159312, 159311, 159307, 159305, 159304, 159302, 159298, 159294, 159288, 159286, 159285, 159281, 159277, 159263, 159262, 159255, 159239, 159232, 159227, 159223, 159219, 159210, 159209, 159203, 159191, 159187, 159185, 159183, 159177, 159176, 159169, 159167, 159165, 159163, 159161, 159155, 159146, 159145, 159144, 159143, 159131, 159130, 159116, 159112, 159107, 159093, 159088, 159087, 159085, 159080, 159075, 159073, 159072, 159070, 159068, 159067, 159064, 159063, 159062, 159061, 159060, 159058, 159055, 159050, 159049, 159047, 159045, 159043, 159040, 159039, 159038, 159028, 159024, 159020, 159010, 159008, 159007, 159005, 159004, 159003, 158995, 158994, 158967, 158943, 158941, 158940, 158934, 158928, 158921, 158916, 158914, 158907, 158869, 158863, 158859, 158855, 158854, 158835, 158826, 158816, 158738, 158735, 158731, 158724, 158713, 158708, 158703, 158687, 158685, 158671, 158670, 158669, 158667, 158662, 158659, 158654, 158652, 158649, 158648, 158645, 158642, 158641, 158640, 158636, 158635, 158630, 158625, 158618, 158602, 158600, 158599, 158595, 158594, 158592, 158576, 158561, 158559, 158535, 158533, 158527, 158518, 158508, 158493, 158486, 158485, 158476, 158475, 158472, 158462, 158460, 158458, 158457, 158443, 158442, 158431, 158429, 158424, 158410, 158405, 158401, 158381, 158378, 158377, 158371, 158370, 158366, 158365, 158357, 158350, 158337, 158336, 158331, 158293, 158288, 158287, 158286, 158285, 158284, 158283, 158280, 158264, 158259, 158258, 158254, 158245, 158244, 158237, 158235, 158217, 158208, 158207, 158203, 158202, 158201, 158200, 158199, 158198, 158194, 158190, 158189, 158185, 158184, 158146, 158126, 158071, 158070, 158068, 158067, 158062, 158061, 158042, 158038, 158034, 158025, 158018, 157977, 157928, 157924, 157920, 157917, 157902, 157901, 157897, 157895, 157893, 157888, 157886, 157883, 157878, 157877, 157871, 157869, 157859, 157850, 157846, 157844, 157843, 157828, 157815, 157797, 157765, 157756, 157753, 157752, 157750, 157749, 157743, 157742, 157738, 157735, 157730, 157728, 157727, 157726, 157720, 157719, 157712, 157711, 157698, 157684, 157679, 157678, 157677, 157670, 157664, 157663, 157661, 157651, 157637, 157613, 157604, 157600, 157592, 157552, 157551, 157546, 157543, 157541, 157508, 157507, 157498, 157496, 157494, 157493, 157483, 157478, 157476, 157474, 157456, 157452, 157450, 157448, 157447, 157445, 157439, 157421, 157420, 157419, 157409, 157408, 157407, 157405, 157402, 157401, 157393, 157387, 157386, 157384, 157380, 157379, 157378, 157377, 157369, 157362, 157361, 157162, 157128, 157120, 157113, 157098, 157095, 157094, 157093, 157092, 157082, 157070, 157069, 157063, 157061, 157060, 157048, 157004, 157003, 156967, 156964, 156866, 156844, 156820, 156626, 156577, 156564, 156563, 156556, 156551, 156537, 156510, 156509, 156506, 156503, 156497, 156496, 156495, 156485, 156483, 156480, 156473, 156439, 156422, 156418, 156406, 156390, 156386, 156377, 156369, 156365, 156362, 156361, 156360, 156346, 156339, 156338, 156336, 156331, 156327, 156325, 156317, 156311, 156305, 156260, 156172, 156170, 156168, 156167, 156165, 156164, 156161, 156160, 156154, 156153, 156145, 156144, 156143, 156141, 156134, 156133, 156130, 156097, 156096, 156095, 156090, 156086, 156073, 156072, 156055, 156047, 156034, 156032, 156030 };
    }
}
